//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa)
//
// On Sun Apr 30 12:26:23 CEST 2023
//
//
// Ports:
// Name                         I/O  size props
// request_get                    O    35 reg
// RDY_request_get                O     1 reg
// RDY_response_put               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// response_put                   I    16 reg
// EN_response_put                I     1
// EN_request_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkJ1(CLK,
	    RST_N,

	    EN_request_get,
	    request_get,
	    RDY_request_get,

	    response_put,
	    EN_response_put,
	    RDY_response_put);
  input  CLK;
  input  RST_N;

  // actionvalue method request_get
  input  EN_request_get;
  output [34 : 0] request_get;
  output RDY_request_get;

  // action method response_put
  input  [15 : 0] response_put;
  input  EN_response_put;
  output RDY_response_put;

  // signals for module outputs
  wire [34 : 0] request_get;
  wire RDY_request_get, RDY_response_put;

  // register dsp
  reg [4 : 0] dsp;
  wire [4 : 0] dsp$D_IN;
  wire dsp$EN;

  // register ioWait
  reg ioWait;
  wire ioWait$D_IN, ioWait$EN;

  // register pc
  reg [14 : 0] pc;
  wire [14 : 0] pc$D_IN;
  wire pc$EN;

  // register rsp
  reg [4 : 0] rsp;
  wire [4 : 0] rsp$D_IN;
  wire rsp$EN;

  // register st0
  reg [15 : 0] st0;
  wire [15 : 0] st0$D_IN;
  wire st0$EN;

  // ports of submodule dstack
  wire [15 : 0] dstack$D_IN, dstack$D_OUT_1;
  wire [4 : 0] dstack$ADDR_1,
	       dstack$ADDR_2,
	       dstack$ADDR_3,
	       dstack$ADDR_4,
	       dstack$ADDR_5,
	       dstack$ADDR_IN;
  wire dstack$WE;

  // ports of submodule io_req
  wire [34 : 0] io_req$D_IN, io_req$D_OUT;
  wire io_req$CLR, io_req$DEQ, io_req$EMPTY_N, io_req$ENQ, io_req$FULL_N;

  // ports of submodule io_rsp
  wire [15 : 0] io_rsp$D_IN, io_rsp$D_OUT;
  wire io_rsp$CLR, io_rsp$DEQ, io_rsp$EMPTY_N, io_rsp$ENQ, io_rsp$FULL_N;

  // ports of submodule ram
  wire [15 : 0] ram$DIA, ram$DIB, ram$DOA, ram$DOB;
  wire [13 : 0] ram$ADDRA, ram$ADDRB;
  wire ram$ENA, ram$ENB, ram$WEA, ram$WEB;

  // ports of submodule rstack
  wire [15 : 0] rstack$D_IN, rstack$D_OUT_1;
  wire [4 : 0] rstack$ADDR_1,
	       rstack$ADDR_2,
	       rstack$ADDR_3,
	       rstack$ADDR_4,
	       rstack$ADDR_5,
	       rstack$ADDR_IN;
  wire rstack$WE;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h3521;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4,
	       CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q7,
	       IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124,
	       _st0__h1717;
  reg [14 : 0] IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152,
	       IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186;
  reg [4 : 0] CASE_insn10_BITS_15_TO_13_0b0_dsp_0b1_dsp354_0_ETC__q5;
  wire [15 : 0] IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110,
		IF_NOT_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read__ETC___d194,
		IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85,
		IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88,
		IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100,
		IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103,
		IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93,
		insn__h810,
		st0_6_AND_dstack_sub_dsp_0_9___d76,
		st0_6_MINUS_1___d95,
		st0_6_OR_dstack_sub_dsp_0_9___d78,
		st0_6_PLUS_dstack_sub_dsp_0_9___d74,
		st0_6_XOR_dstack_sub_dsp_0_9___d80,
		x__h1082,
		x__h1531;
  wire [14 : 0] IF_NOT_insn10_BITS_15_TO_13_EQ_0b0_AND_NOT_ins_ETC__q6,
		_pc__h1009,
		_theResult____h1355,
		_theResult____h1994,
		v__h2080,
		v__h2649,
		x__h1272,
		x__h1660,
		y_avValue_snd_snd_snd_fst__h3332;
  wire [12 : 0] insn10_BITS_12_TO_0__q1, x__h1292, x__h1482, x__h1680;
  wire [4 : 0] _dsp__h1354, _dsp__h1718, _dsp__h970, _rsp__h1521, _rsp__h1855;
  wire [1 : 0] insn10_BITS_1_TO_0__q2, insn10_BITS_3_TO_2__q3;
  wire NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d165,
       NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47,
       st0_6_BITS_15_TO_14_7_EQ_0b0_8_OR_NOT_IF_pc_EQ_ETC___d173,
       st0_6_ULE_15___d90;

  // actionvalue method request_get
  assign request_get = io_req$D_OUT ;
  assign RDY_request_get = io_req$EMPTY_N ;

  // action method response_put
  assign RDY_response_put = io_rsp$FULL_N ;

  // submodule dstack
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd16),
	    .lo(5'h0),
	    .hi(5'd31)) dstack(.CLK(CLK),
			       .ADDR_1(dstack$ADDR_1),
			       .ADDR_2(dstack$ADDR_2),
			       .ADDR_3(dstack$ADDR_3),
			       .ADDR_4(dstack$ADDR_4),
			       .ADDR_5(dstack$ADDR_5),
			       .ADDR_IN(dstack$ADDR_IN),
			       .D_IN(dstack$D_IN),
			       .WE(dstack$WE),
			       .D_OUT_1(dstack$D_OUT_1),
			       .D_OUT_2(),
			       .D_OUT_3(),
			       .D_OUT_4(),
			       .D_OUT_5());

  // submodule io_req
  FIFO2 #(.width(32'd35), .guarded(1'd1)) io_req(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(io_req$D_IN),
						 .ENQ(io_req$ENQ),
						 .DEQ(io_req$DEQ),
						 .CLR(io_req$CLR),
						 .D_OUT(io_req$D_OUT),
						 .FULL_N(io_req$FULL_N),
						 .EMPTY_N(io_req$EMPTY_N));

  // submodule io_rsp
  FIFO2 #(.width(32'd16), .guarded(1'd1)) io_rsp(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(io_rsp$D_IN),
						 .ENQ(io_rsp$ENQ),
						 .DEQ(io_rsp$DEQ),
						 .CLR(io_rsp$CLR),
						 .D_OUT(io_rsp$D_OUT),
						 .FULL_N(io_rsp$FULL_N),
						 .EMPTY_N(io_rsp$EMPTY_N));

  // submodule ram
  BRAM2Load #(.FILENAME("j1.hex"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd14),
	      .DATA_WIDTH(32'd16),
	      .MEMSIZE(15'd16384),
	      .BINARY(1'd0)) ram(.CLKA(CLK),
				 .CLKB(CLK),
				 .ADDRA(ram$ADDRA),
				 .ADDRB(ram$ADDRB),
				 .DIA(ram$DIA),
				 .DIB(ram$DIB),
				 .WEA(ram$WEA),
				 .WEB(ram$WEB),
				 .ENA(ram$ENA),
				 .ENB(ram$ENB),
				 .DOA(ram$DOA),
				 .DOB(ram$DOB));

  // submodule rstack
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd16),
	    .lo(5'h0),
	    .hi(5'd31)) rstack(.CLK(CLK),
			       .ADDR_1(rstack$ADDR_1),
			       .ADDR_2(rstack$ADDR_2),
			       .ADDR_3(rstack$ADDR_3),
			       .ADDR_4(rstack$ADDR_4),
			       .ADDR_5(rstack$ADDR_5),
			       .ADDR_IN(rstack$ADDR_IN),
			       .D_IN(rstack$D_IN),
			       .WE(rstack$WE),
			       .D_OUT_1(rstack$D_OUT_1),
			       .D_OUT_2(),
			       .D_OUT_3(),
			       .D_OUT_4(),
			       .D_OUT_5());

  // register dsp
  assign dsp$D_IN =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       _dsp__h970 :
	       CASE_insn10_BITS_15_TO_13_0b0_dsp_0b1_dsp354_0_ETC__q5 ;
  assign dsp$EN =
	     insn__h810[15:13] != 3'b011 || insn__h810[15:13] == 3'b0 ||
	     insn__h810[15:13] == 3'b001 ||
	     insn__h810[15:13] == 3'b010 ||
	     NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47 ;

  // register ioWait
  assign ioWait$D_IN =
	     st0[15:14] != 2'b0 && insn__h810[11:8] == 4'd12 && !ioWait ;
  assign ioWait$EN =
	     insn__h810[15:13] == 3'b011 &&
	     st0_6_BITS_15_TO_14_7_EQ_0b0_8_OR_NOT_IF_pc_EQ_ETC___d173 ;

  // register pc
  assign pc$D_IN =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       _pc__h1009 :
	       IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152 ;
  assign pc$EN =
	     insn__h810[15:13] != 3'b011 || insn__h810[15:13] == 3'b0 ||
	     insn__h810[15:13] == 3'b001 ||
	     insn__h810[15:13] == 3'b010 ||
	     NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47 ;

  // register rsp
  assign rsp$D_IN =
	     (insn__h810[15:13] != 3'b010 && insn__h810[15:13] != 3'b011) ?
	       rsp :
	       ((insn__h810[15:13] == 3'b010) ? _rsp__h1521 : _rsp__h1855) ;
  assign rsp$EN =
	     insn__h810[15:13] != 3'b011 || insn__h810[15:13] == 3'b0 ||
	     insn__h810[15:13] == 3'b001 ||
	     insn__h810[15:13] == 3'b010 ||
	     NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47 ;

  // register st0
  assign st0$D_IN =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       x__h1082 :
	       CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q7 ;
  assign st0$EN =
	     insn__h810[15:13] != 3'b011 || insn__h810[15:13] == 3'b0 ||
	     insn__h810[15:13] == 3'b001 ||
	     insn__h810[15:13] == 3'b010 ||
	     NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47 ;

  // submodule dstack
  assign dstack$ADDR_1 = dsp ;
  assign dstack$ADDR_2 = 5'h0 ;
  assign dstack$ADDR_3 = 5'h0 ;
  assign dstack$ADDR_4 = 5'h0 ;
  assign dstack$ADDR_5 = 5'h0 ;
  assign dstack$ADDR_IN =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       _dsp__h970 :
	       _dsp__h1718 ;
  assign dstack$D_IN = st0 ;
  assign dstack$WE =
	     insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	     insn__h810[15:13] != 3'b010 &&
	     insn__h810[15:13] != 3'b011 ||
	     insn__h810[15:13] == 3'b011 && insn__h810[7] ;

  // submodule io_req
  assign io_req$D_IN = { insn__h810[5], 2'd3, st0, dstack$D_OUT_1 } ;
  assign io_req$ENQ =
	     insn__h810[15:13] == 3'b011 &&
	     (st0[15:14] != 2'b0 && insn__h810[5] && io_req$FULL_N ||
	      !insn__h810[5] &&
	      NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d165) ;
  assign io_req$DEQ = EN_request_get ;
  assign io_req$CLR = 1'b0 ;

  // submodule io_rsp
  assign io_rsp$D_IN = response_put ;
  assign io_rsp$ENQ = EN_response_put ;
  assign io_rsp$DEQ =
	     insn__h810[15:13] == 3'b011 &&
	     (st0[15:14] == 2'b0 || !insn__h810[5]) &&
	     ioWait &&
	     io_rsp$EMPTY_N ;
  assign io_rsp$CLR = 1'b0 ;

  // submodule ram
  assign ram$ADDRA =
	     IF_NOT_insn10_BITS_15_TO_13_EQ_0b0_AND_NOT_ins_ETC__q6[14:1] ;
  assign ram$ADDRB =
	     IF_NOT_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read__ETC___d194[14:1] ;
  assign ram$DIA = 16'd0 ;
  assign ram$DIB = dstack$D_OUT_1 ;
  assign ram$WEA = 1'd0 ;
  assign ram$WEB =
	     IF_NOT_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read__ETC___d194[15:14] ==
	     2'b0 &&
	     insn__h810[15:13] == 3'b011 &&
	     insn__h810[5] ;
  assign ram$ENA = 1'd1 ;
  assign ram$ENB = 1'd1 ;

  // submodule rstack
  assign rstack$ADDR_1 = rsp ;
  assign rstack$ADDR_2 = 5'h0 ;
  assign rstack$ADDR_3 = 5'h0 ;
  assign rstack$ADDR_4 = 5'h0 ;
  assign rstack$ADDR_5 = 5'h0 ;
  assign rstack$ADDR_IN =
	     (insn__h810[15:13] == 3'b010) ? _rsp__h1521 : _rsp__h1855 ;
  assign rstack$D_IN = (insn__h810[15:13] == 3'b010) ? x__h1531 : st0 ;
  assign rstack$WE =
	     insn__h810[15:13] == 3'b010 ||
	     insn__h810[15:13] == 3'b011 && insn__h810[6] ;

  // remaining internal signals
  assign IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110 =
	     (dstack$D_OUT_1 < st0) ? 16'd65535 : 16'd0 ;
  assign IF_NOT_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read__ETC___d194 =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       x__h1082 :
	       CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4 ;
  assign IF_NOT_insn10_BITS_15_TO_13_EQ_0b0_AND_NOT_ins_ETC__q6 =
	     (insn__h810[15:13] != 3'b0 && insn__h810[15:13] != 3'b001 &&
	      insn__h810[15:13] != 3'b010 &&
	      insn__h810[15:13] != 3'b011) ?
	       _pc__h1009 :
	       IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 ;
  assign IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85 =
	     (dstack$D_OUT_1 == st0) ? 16'd65535 : 16'd0 ;
  assign IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88 =
	     ((dstack$D_OUT_1 ^ 16'h8000) < (st0 ^ 16'h8000)) ?
	       16'd65535 :
	       16'd0 ;
  assign IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100 =
	     (st0[15:14] == 2'b0) ? ram$DOB : io_rsp$D_OUT ;
  assign IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103 =
	     st0_6_ULE_15___d90 ? dstack$D_OUT_1 << st0[3:0] : 16'd0 ;
  assign IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93 =
	     st0_6_ULE_15___d90 ? dstack$D_OUT_1 >> st0[3:0] : 16'd0 ;
  assign NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d165 =
	     st0[15:14] != 2'b0 && insn__h810[11:8] == 4'd12 && !ioWait &&
	     io_req$FULL_N ;
  assign NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d47 =
	     st0[15:14] != 2'b0 && insn__h810[5] && io_req$FULL_N ||
	     (st0[15:14] == 2'b0 || !insn__h810[5]) &&
	     (st0[15:14] == 2'b0 || insn__h810[11:8] != 4'd12 || ioWait) &&
	     (!ioWait || io_rsp$EMPTY_N) ;
  assign _dsp__h1354 = dsp - 5'd1 ;
  assign _dsp__h1718 =
	     dsp +
	     { {3{insn10_BITS_1_TO_0__q2[1]}}, insn10_BITS_1_TO_0__q2 } ;
  assign _dsp__h970 = dsp + 5'd1 ;
  assign _pc__h1009 = pc + 15'd2 ;
  assign _rsp__h1521 = rsp + 5'd1 ;
  assign _rsp__h1855 =
	     rsp +
	     { {3{insn10_BITS_3_TO_2__q3[1]}}, insn10_BITS_3_TO_2__q3 } ;
  assign _theResult____h1355 =
	     (st0 == 16'd0) ? { 2'd0, x__h1482 } : _pc__h1009 ;
  assign _theResult____h1994 =
	     insn__h810[12] ? rstack$D_OUT_1[14:0] : _pc__h1009 ;
  assign insn10_BITS_12_TO_0__q1 = insn__h810[12:0] ;
  assign insn10_BITS_1_TO_0__q2 = insn__h810[1:0] ;
  assign insn10_BITS_3_TO_2__q3 = insn__h810[3:2] ;
  assign insn__h810 = (pc == 15'd0) ? 16'h6000 : ram$DOA ;
  assign st0_6_AND_dstack_sub_dsp_0_9___d76 = st0 & dstack$D_OUT_1 ;
  assign st0_6_BITS_15_TO_14_7_EQ_0b0_8_OR_NOT_IF_pc_EQ_ETC___d173 =
	     (st0[15:14] == 2'b0 || !insn__h810[5]) &&
	     (NOT_st0_6_BITS_15_TO_14_7_EQ_0b0_8_9_AND_IF_pc_ETC___d165 ||
	      ioWait && io_rsp$EMPTY_N) ;
  assign st0_6_MINUS_1___d95 = st0 - 16'd1 ;
  assign st0_6_OR_dstack_sub_dsp_0_9___d78 = st0 | dstack$D_OUT_1 ;
  assign st0_6_PLUS_dstack_sub_dsp_0_9___d74 = st0 + dstack$D_OUT_1 ;
  assign st0_6_ULE_15___d90 = st0 <= 16'd15 ;
  assign st0_6_XOR_dstack_sub_dsp_0_9___d80 = st0 ^ dstack$D_OUT_1 ;
  assign v__h2080 = io_req$FULL_N ? _theResult____h1994 : pc ;
  assign v__h2649 =
	     (st0[15:14] != 2'b0 && insn__h810[11:8] == 4'd12 && !ioWait ||
	      ioWait && !io_rsp$EMPTY_N) ?
	       pc :
	       _theResult____h1994 ;
  assign x__h1082 = { 1'd0, insn__h810[14:0] } ;
  assign x__h1272 = { 2'd0, x__h1292 } ;
  assign x__h1292 = { insn10_BITS_12_TO_0__q1[11:0], 1'd0 } ;
  assign x__h1482 = x__h1292 ;
  assign x__h1531 = { 1'd0, _pc__h1009 } ;
  assign x__h1660 = { 2'd0, x__h1680 } ;
  assign x__h1680 = x__h1292 ;
  assign y_avValue_snd_snd_snd_fst__h3332 =
	     (st0[15:14] != 2'b0 && insn__h810[5]) ? v__h2080 : v__h2649 ;
  always@(insn__h810 or
	  pc or
	  x__h1272 or
	  _theResult____h1355 or x__h1660 or y_avValue_snd_snd_snd_fst__h3332)
  begin
    case (insn__h810[15:13])
      3'b0:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 =
	      x__h1272;
      3'b001:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 =
	      _theResult____h1355;
      3'b010:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 =
	      x__h1660;
      3'b011:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 =
	      y_avValue_snd_snd_snd_fst__h3332;
      default: IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d186 = pc;
    endcase
  end
  always@(insn__h810 or
	  _theResult____h1994 or x__h1272 or _theResult____h1355 or x__h1660)
  begin
    case (insn__h810[15:13])
      3'b0:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152 =
	      x__h1272;
      3'b001:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152 =
	      _theResult____h1355;
      3'b010:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152 =
	      x__h1660;
      default: IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d152 =
		   _theResult____h1994;
    endcase
  end
  always@(insn__h810 or
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110 or
	  st0 or
	  dstack$D_OUT_1 or
	  st0_6_PLUS_dstack_sub_dsp_0_9___d74 or
	  st0_6_AND_dstack_sub_dsp_0_9___d76 or
	  st0_6_OR_dstack_sub_dsp_0_9___d78 or
	  st0_6_XOR_dstack_sub_dsp_0_9___d80 or
	  IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85 or
	  IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88 or
	  IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93 or
	  st0_6_MINUS_1___d95 or
	  rstack$D_OUT_1 or
	  IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100 or
	  IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103 or
	  rsp or dsp)
  begin
    case (insn__h810[11:8])
      4'd0: _st0__h1717 = st0;
      4'd1: _st0__h1717 = dstack$D_OUT_1;
      4'd2: _st0__h1717 = st0_6_PLUS_dstack_sub_dsp_0_9___d74;
      4'd3: _st0__h1717 = st0_6_AND_dstack_sub_dsp_0_9___d76;
      4'd4: _st0__h1717 = st0_6_OR_dstack_sub_dsp_0_9___d78;
      4'd5: _st0__h1717 = st0_6_XOR_dstack_sub_dsp_0_9___d80;
      4'd6: _st0__h1717 = ~st0;
      4'd7:
	  _st0__h1717 =
	      IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85;
      4'd8:
	  _st0__h1717 =
	      IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88;
      4'd9:
	  _st0__h1717 =
	      IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93;
      4'd10: _st0__h1717 = st0_6_MINUS_1___d95;
      4'd11: _st0__h1717 = rstack$D_OUT_1;
      4'd12:
	  _st0__h1717 =
	      IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100;
      4'd13:
	  _st0__h1717 =
	      IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103;
      4'd14: _st0__h1717 = { 3'b0, rsp, 3'b0, dsp };
      4'd15:
	  _st0__h1717 =
	      IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110;
    endcase
  end
  always@(insn__h810 or
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110 or
	  dstack$D_OUT_1 or
	  st0_6_PLUS_dstack_sub_dsp_0_9___d74 or
	  st0_6_AND_dstack_sub_dsp_0_9___d76 or
	  st0_6_OR_dstack_sub_dsp_0_9___d78 or
	  st0_6_XOR_dstack_sub_dsp_0_9___d80 or
	  st0 or
	  IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85 or
	  IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88 or
	  IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93 or
	  st0_6_MINUS_1___d95 or
	  rstack$D_OUT_1 or
	  IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100 or
	  IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103 or
	  rsp or dsp)
  begin
    case (insn__h810[11:8])
      4'd1:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      dstack$D_OUT_1;
      4'd2:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      st0_6_PLUS_dstack_sub_dsp_0_9___d74;
      4'd3:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      st0_6_AND_dstack_sub_dsp_0_9___d76;
      4'd4:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      st0_6_OR_dstack_sub_dsp_0_9___d78;
      4'd5:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      st0_6_XOR_dstack_sub_dsp_0_9___d80;
      4'd6: IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 = ~st0;
      4'd7:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      IF_dstack_sub_dsp_0_9_EQ_st0_6_4_THEN_65535_EL_ETC___d85;
      4'd8:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      IF_dstack_sub_dsp_0_9_SLT_st0_6_7_THEN_65535_E_ETC___d88;
      4'd9:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SRL__ETC___d93;
      4'd10:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      st0_6_MINUS_1___d95;
      4'd11:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      rstack$D_OUT_1;
      4'd12:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      IF_st0_6_BITS_15_TO_14_7_EQ_0b0_8_THEN_ram_b_r_ETC___d100;
      4'd13:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      IF_st0_6_ULE_15_0_THEN_dstack_sub_dsp_0_9_SL_s_ETC___d103;
      4'd14:
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
	      { 3'b0, rsp, 3'b0, dsp };
      default: IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 =
		   IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d110;
    endcase
  end
  always@(insn__h810 or st0 or dstack$D_OUT_1 or _st0__h1717)
  begin
    case (insn__h810[15:13])
      3'b0, 3'b010:
	  CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4 = st0;
      3'b001:
	  CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4 =
	      dstack$D_OUT_1;
      3'b011:
	  CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4 = _st0__h1717;
      default: CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q4 = st0;
    endcase
  end
  always@(insn__h810 or _dsp__h1718 or dsp or _dsp__h1354)
  begin
    case (insn__h810[15:13])
      3'b0, 3'b010:
	  CASE_insn10_BITS_15_TO_13_0b0_dsp_0b1_dsp354_0_ETC__q5 = dsp;
      3'b001:
	  CASE_insn10_BITS_15_TO_13_0b0_dsp_0b1_dsp354_0_ETC__q5 =
	      _dsp__h1354;
      default: CASE_insn10_BITS_15_TO_13_0b0_dsp_0b1_dsp354_0_ETC__q5 =
		   _dsp__h1718;
    endcase
  end
  always@(insn__h810 or
	  st0 or
	  IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124 or
	  dstack$D_OUT_1)
  begin
    case (insn__h810[15:13])
      3'b0: CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q7 = st0;
      3'b001:
	  CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q7 =
	      dstack$D_OUT_1;
      default: CASE_insn10_BITS_15_TO_13_0b0_st0_0b1_dstackD_ETC__q7 =
		   (insn__h810[15:13] == 3'b010 || insn__h810[11:8] == 4'd0) ?
		     st0 :
		     IF_IF_pc_EQ_0_THEN_0x6000_ELSE_ram_a_read_BITS_ETC___d124;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dsp <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ioWait <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pc <= `BSV_ASSIGNMENT_DELAY 15'd0;
	rsp <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (dsp$EN) dsp <= `BSV_ASSIGNMENT_DELAY dsp$D_IN;
	if (ioWait$EN) ioWait <= `BSV_ASSIGNMENT_DELAY ioWait$D_IN;
	if (pc$EN) pc <= `BSV_ASSIGNMENT_DELAY pc$D_IN;
	if (rsp$EN) rsp <= `BSV_ASSIGNMENT_DELAY rsp$D_IN;
      end
    if (st0$EN) st0 <= `BSV_ASSIGNMENT_DELAY st0$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dsp = 5'h0A;
    ioWait = 1'h0;
    pc = 15'h2AAA;
    rsp = 5'h0A;
    st0 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h3521 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      $display("%t: pc=%h insn=%h dsp=%h st0=%h st1=%h rsp=%h rst0=%h",
	       v__h3521,
	       pc,
	       insn__h810,
	       dsp,
	       st0,
	       dstack$D_OUT_1,
	       rsp,
	       rstack$D_OUT_1);
  end
  // synopsys translate_on
endmodule  // mkJ1

