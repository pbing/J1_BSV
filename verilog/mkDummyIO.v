//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Sun Oct  3 10:39:31 CEST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1 reg
// response_get                   O    16 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    35 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDummyIO(CLK,
		 RST_N,

		 request_put,
		 EN_request_put,
		 RDY_request_put,

		 EN_response_get,
		 response_get,
		 RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [34 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [15 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [15 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule io_req
  wire [34 : 0] io_req$D_IN, io_req$D_OUT;
  wire io_req$CLR, io_req$DEQ, io_req$EMPTY_N, io_req$ENQ, io_req$FULL_N;

  // ports of submodule io_rsp
  wire [15 : 0] io_rsp$D_IN, io_rsp$D_OUT;
  wire io_rsp$CLR, io_rsp$DEQ, io_rsp$EMPTY_N, io_rsp$ENQ, io_rsp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_serve_io;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h259;
  reg [63 : 0] v__h373;
  // synopsys translate_on

  // remaining internal signals
  wire [15 : 0] rsp_data__h361;

  // action method request_put
  assign RDY_request_put = io_req$FULL_N ;

  // actionvalue method response_get
  assign response_get = io_rsp$D_OUT ;
  assign RDY_response_get = io_rsp$EMPTY_N ;

  // submodule io_req
  FIFO2 #(.width(32'd35), .guarded(1'd1)) io_req(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(io_req$D_IN),
						 .ENQ(io_req$ENQ),
						 .DEQ(io_req$DEQ),
						 .CLR(io_req$CLR),
						 .D_OUT(io_req$D_OUT),
						 .FULL_N(io_req$FULL_N),
						 .EMPTY_N(io_req$EMPTY_N));

  // submodule io_rsp
  FIFO2 #(.width(32'd16), .guarded(1'd1)) io_rsp(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(io_rsp$D_IN),
						 .ENQ(io_rsp$ENQ),
						 .DEQ(io_rsp$DEQ),
						 .CLR(io_rsp$CLR),
						 .D_OUT(io_rsp$D_OUT),
						 .FULL_N(io_rsp$FULL_N),
						 .EMPTY_N(io_rsp$EMPTY_N));

  // rule RL_serve_io
  assign WILL_FIRE_RL_serve_io = io_req$EMPTY_N && io_rsp$FULL_N ;

  // submodule io_req
  assign io_req$D_IN = request_put ;
  assign io_req$ENQ = EN_request_put ;
  assign io_req$DEQ = io_req$EMPTY_N && io_rsp$FULL_N ;
  assign io_req$CLR = 1'b0 ;

  // submodule io_rsp
  assign io_rsp$D_IN = ~io_req$D_OUT[31:16] ;
  assign io_rsp$ENQ = WILL_FIRE_RL_serve_io && !io_req$D_OUT[34] ;
  assign io_rsp$DEQ = EN_response_get ;
  assign io_rsp$CLR = 1'b0 ;

  // remaining internal signals
  assign rsp_data__h361 = ~io_req$D_OUT[31:16] ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io)
	begin
	  v__h259 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write("%t IO_REQ=", v__h259);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write("MemoryRequest { ", "write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && io_req$D_OUT[34]) $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34]) $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write(", ", "byteen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write("'h%h", io_req$D_OUT[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write(", ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write("'h%h", io_req$D_OUT[31:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io) $write("'h%h", io_req$D_OUT[15:0], " }");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_serve_io) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34])
	begin
	  v__h373 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34])
	$write("%t IO_RSP=", v__h373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34])
	$write("MemoryResponse { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34])
	$write("'h%h", rsp_data__h361, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_serve_io && !io_req$D_OUT[34]) $write("\n");
  end
  // synopsys translate_on
endmodule  // mkDummyIO

